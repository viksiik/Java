//Task 2. Producer-consumer task
//Завдання. Реалізувати потокобезпечний кільцевий буфер та виконання
//наступних вимог:
//        1) П’ять потоків генерують рядки в кільцевий буфер. Рядок має
//формат: «Потік № … згенерував повідомлення …»
//        2) Інші два потоки перекладають рядки з першого кільцевого у другий
//кільцевий буфер. У другий кільцевий буфер записується рядок
//наступного формату: «Потік № … переклав повідомлення …».
//        3) Основний потік програми вичитує та роздруковує 100 повідомлень
//із другого буфера.
//        Потоки, описані у вимогах 1)-2) повинні бути потоками-демонами,
//інакше програма не завершить своє виконання.
//Кільцевий буфер – це зв’язний список, який замкнений у кільце.
//Кільцевий буфер зберігає значення за допомогою двох індексів: головного
//та кінцевого. При занесенні даних в буфер збільшується кінцевий індекс.
//При видобуванні даних із буфера збільшується головний індекс. При
//виході за границю списку індекси автоматично корегуються, переходячи
//до першого елементу списку. Ситуація, коли головний елемент співпадає
//        із кінцевим, інтерпретується як порожній буфер.
//При роботі з кільцевим буфером врахувати наступне:
//        1) якщо кільцевий буфер порожній, то потік, що видобуває дані,
//        повинен зачекати, поки у буфері з’являться дані;
//2) якщо кільцевий буфер повний, то потік, що додає дані, повинен
//зачекати, поки у буфері не з’явиться місцe


public class Main {
    public static void main(String[] args) throws InterruptedException {
        CircularBuffer buffer1 = new CircularBuffer(10);
        CircularBuffer buffer2 = new CircularBuffer(10);

        Thread[] producers = new Thread[5];
        for (int i = 0; i < 5; i++) {
            producers[i] = new Thread(new Producer(buffer1, i + 1));
            producers[i].setDaemon(true);
            producers[i].start();
        }

        Thread[] translators = new Thread[2];
        for (int i = 0; i < 2; i++) {
            translators[i] = new Thread(new Translator(buffer1, buffer2, i + 1));
            translators[i].setDaemon(true);
            translators[i].start();
        }

        for (int i = 0; i < 100; i++) {
            String message = buffer2.take();
            System.out.println("Основний потік вивів: \"" + message + "\"");
        }
    }
}
